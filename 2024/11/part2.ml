let len (i:int) :int =
  let i' = ref i in
  let sum = ref 1 in
  while !i' > 9 do
    sum := !sum + 1;
    i' := !i' / 10;
  done;
  !sum

let rec pow a = function
  | 0 -> 1
  | 1 -> a
  | n -> 
    let b = pow a (n / 2) in
    b * b * (if n mod 2 = 0 then 1 else a)

let split (value:int) (index:int) =
  let p = pow 10 index in
  (value/p, value mod p)

let rec blink (i:int) (n:int) (tbl: (int*int, int) Hashtbl.t) :int = (* Return the number of stone generated by i after n steps*)
  if Hashtbl.mem tbl (i,n) then
    Hashtbl.find tbl (i,n)
  else 
    let stoneCount:int =
      begin
        if n = 0 then
          1
        else
          if i = 0 then
            blink 1 (n-1) tbl
          else
            let l = len i in
            if (l mod 2) = 0 then
              let (a,b) = split i (l/2) in
              (blink a (n-1) tbl) + (blink b (n-1) tbl)
            else
              blink (i*2024) (n-1) tbl
      end
    in Hashtbl.add tbl (i,n) stoneCount; stoneCount
  

let parse_input (filename: string) :int list =
  let ic = open_in filename in
  try
    let line = input_line ic in
    let result = List.map int_of_string (String.split_on_char ' ' line) in
    close_in ic;
    result
  with e ->
    close_in_noerr ic;
    raise e

let input = parse_input "input.txt"
let tbl = Hashtbl.create 1000
let stones = List.map(fun k -> blink k 75 tbl) input
let _ = Printf.printf "Number of stones : %d\n" (List.fold_left (+) 0 stones)
